module
    = statments

statements
    = { statement ^ <terminator> }

statement
    = declaration
    | return_statement
    | yield_statement
    | extend_statement
    | assignment
    | expression

declaration
    = [ <doc> ] "var" ^ pattern "=" expression

assignment
    = <ident> "=" ^ expression

return_statement
    = "return" ^ expression

yield_statement
    = "yield" ^ expression

extend_statement
    = "extend" ^ expression

pattern
    = list
    | map
    | atom

list
    = "List" "[" ^ expressions "]"

map
    = ""Map "[" ^ pairs "]"

pair
    = <ident> [ ":" ^ expression ]
    | "[" ^ expression "]" ":" expression

function
    = "Function" "{" ^ ( cases | single_case | statemtns) "}"

single_case
    = patterns "->" ^ statements

case
    = patterns [ guard ] "=>" expression

block
    = "{" statements "}"

expression
    = if_expression
    | do_expression
    | while_expression
    | match_expression
    | for_expression
    | class_expression
    | try_expression
    | throw_expression
    | function
    | generator
    | expression1

if_expression
    = guard "then" block [ "else" ^ ( block | if_expression ) ]

do_expression
    = "do" ^ block

while_expression
    = while_guard "do" block

while_guard
    = "while" ^ expression

match_expression
    = "match" ^ expression "with" "{" cases "}"

for_expression
    = "for" ^ pattern "in" expression [ guard ] [ while_guard ] "do" block

class_expression
    = "class" ^ single

try_expression
    = "try" ^ block ( "catch" single_case | [ "catch" single_case ] "finally" block )

throw_expression
    = "throw" ^ expression

expression1
    = expression1 { "or" ^ expression1 }

expression2
    = expression3 { "and" ^ expression2 }

expression3
    = expression4 { ( "/=" | "==" | "is" | "<" | "<=" | ">" | ">=" | "in" ) ^ expression4 }

expression4
    = expression5 { ( "+" | "-" ) ^ expression5 }

expression5
    = expression6 { ( "*" | "/" ) ^ expression6 }

expression6
    = ( "not" | "+" | "-" ) ^ expression7
    | expression7 [ ( ".." | "^" ) expression1 ]

expression7
    = list
    | map
    | [ "..." ] spreadable
    | atom

spreadable
    = "(" ^ expression ")" { { path } call }
    | <ident> { { path } call }

path
    = "." ^ <ident>
    | "[" ".." ^ expression "]"
    | "[" ^ expression [ ".." ] "]"

call
    = "(" ^ expressions ")"

patterns
    = [ pattern ] { "," pattern } [ "," ]

expressions
    = [ expression ] { "," expression } [ "," ]

pairs
    = [ pair ] { "," pair } [ "," ]

cases
    = [ case ] { "," case } [ "," ]