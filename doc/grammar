module
    = statments

statements
    = { statement ( <terminator> | <eof> ) }

statement
    = declaration
    | return_statement
    | yield_statement
    | extend_statement
    | throw_statement
    | assignment
    | expression

declaration
    = [ <doc> ] "var" pattern "=" expression

pattern
    | range_pattern
    | spread_pattern
    | else_pattern
    | list_literal
    | map_literal
    | literal
    | <identifier>

range_pattern
    = [ <number> ] ".." <number>
    | <number> ".."

spread_pattern
    = "..." <identifier>

else_pattern
    = "else"

list_literal
    = "List" "[" expressions "]"

map_literal
    = ""Map "[" pairs "]"

pair
    = "..." simple_expression
    | <identifier> [ ":" expression ]
    | "[" expression "]" ":" expression

literal
    = <string>
    | <number>
    | <boolean>
    | <nothing>

return_statement
    = "return" expression

yield_statement
    = "yield" expression

extend_statement
    = "extend" expression

throw_statement
    = "throw" expression

assignment
    = <identifier> "=" expression

expression
    = control_expression
    | primary_expression

constrol_expression
    = if_expression
    | do_expression
    | while_expression
    | match_expression
    | for_expression
    | class_expression
    | try_expression

if_expression
    = guard "then" block [ "else" ( block | if_expression ) ]

guard
    = "if" primary_expression

do_expression
    = "do" block

while_expression
    = while_guard "do" block

while_guard
    = "while" primary_expression

match_expression
    = "match" primary_expression "with" "{" cases "}"

for_expression
    = "for" pattern "in" primary_expression [ guard ] [ while_guard ] "do" block

class_expression
    = "Class" case_block

try_expression
    = "try" block "catch" case_block [ "finally" block ]

primary_expression
    = function
    | generator 
    | list_literal
    | map_literal
    | or_expression

function
    = "Function" cases_block
    | "Function" case_block

case_block
    = "{" patterns "->" statements "}"
    | block

block
    = "{" statements "}"

cases_block
    = "{" cases "}"

case
    = patterns [ guard ] "=>" statement

generator
    = "Generator" case_block

or_expression
    = and_expression { "or" and_expression }

and_expression
    = relational_expression { "and" relational_expression }

relational_expression
    = additive_expression { relational_operator additive_expression }

relational_operator
    = "/=" 
    | "=="
    | "is not"
    | "is"
    | "<" 
    | "<=" 
    | ">" 
    | ">=" 
    | "not in"
    | "in"

additive_expression
    = multiplicative_expression { additive_operator multiplicative_expression }

additive_operator
    = "+"
    | "-"

multiplicative_expression
    = exponential_expression { multiplicative_operator exponential_expression }

multiplicative_operator
    = "*"
    | "/"

exponential_expression
    = unary_expression [ exponential_operator exponential_expression ]

exponential_operator
    = "^"
    | ".."

unary_expression
    = [ unary_operator ] simple_expression { calls_and_accesses }

unary_operator
    = "not"
    | "+"
    | "-"
    | "..."

simple_expression
    = "(" expression ")"
    | literal
    | <identifier>

calls_and_accesses
    = { [ call ] [ access ] }

call
    = "(" expressions ")"

access
    = identifier_access
    | expression_access
    | pattern_access

identifier_access
    = "." <identifier>

expression_access
    = "[" expression "]"

pattern_access
    = "[" pattern "]"

patterns
    = [ pattern ] { "," pattern } [ "," ]

expressions
    = [ expression ] { "," expression } [ "," ]

pairs
    = [ pair ] { "," pair } [ "," ]

cases
    = [ case ] { "," case } [ "," ]